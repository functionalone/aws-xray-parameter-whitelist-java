buildscript {
    repositories {        
        jcenter()        
    }
    dependencies {        
        classpath("com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3")                
    }
}

apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'


// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

version = '0.1.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8



dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'com.amazonaws:aws-xray-recorder-sdk-aws-sdk:1.3.0'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'commons-logging:commons-logging:1.2'

    // Use JUnit test framework
    testImplementation (
    	'junit:junit:4.12',
    	'com.amazonaws:aws-java-sdk-dynamodb:1.11.259',
    )
}

archivesBaseName = 'aws-xray-parameter-whitelist-instrumentor'
def githubUrl = 'https://github.com/functionalone/aws-xray-parameter-whitelist-java'

task sourceJar(type: Jar) {
	classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name "MIT"
            url "https://opensource.org/licenses/MIT"
            distribution "repo"
        }
    }
    scm {
       url githubUrl
    }
}

publishing {
	publications {
		MyPublication(MavenPublication) {
			from components.java
			artifact sourceJar
            artifact javadocJar
			groupId 'com.github.functionalone'
           	artifactId project.archivesBaseName
            version project.version
			pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Configure AWS X-Ray (Java) with an alternate parameter whitelist')
                root.appendNode('name', project.archivesBaseName)
                root.appendNode('url', githubUrl)
                root.children().last() + pomConfig
            }                        	
		}
	}
}


model {
    tasks.generatePomFileForMyPublicationPublication {
        destination = file("$buildDir/libs/${project.archivesBaseName}-${project.version}.pom")
    }
}


bintray {
    user = System.getProperty("bintray.user")
    key = System.getProperty("bintray.api_key")    
    publications = ['MyPublication']
    publish = true //[Default: false] Whether version should be auto published after an upload
	pkg {
		repo = 'maven'
		name = project.archivesBaseName
		userOrg = 'functionalone'
		desc = 'Configure AWS X-Ray (Java) with an alternate parameter whitelist'
		licenses = ['MIT']
		vcsUrl = githubUrl
		labels = ['aws', 'xray', 'whitelist']
		publicDownloadNumbers = false		
		version {
			name = project.version
			desc = project.version
			vcsTag = 'master'
			//attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
		}
	}
}

test {
	testLogging {
        events "passed", "skipped", "failed"
    }
    systemProperty "aws-xray-whitelist.s3-bucket", System.getProperty("aws-xray-whitelist.s3-bucket")
}



jar {
    manifest {
        attributes('Implementation-Title': project.archivesBaseName,
                   'Implementation-Version': project.version)
    }
}

